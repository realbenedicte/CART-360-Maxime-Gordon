{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww16840\viewh16500\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 Etude-3 - Maxime Gordon
\f1\b0 \
\

\f0\b PART TWO A: CODE OBSERVATION (1.0 Pts)\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf0 \
i) Explain in a stepwise ordering how the game play is implemented?\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}The game starts when any button is pressed. \
{\listtext	\uc0\u8226 	}A new random LED and sound then turns on/plays and the player of the game must press the button corresponding to the LED (and sound). \
{\listtext	\uc0\u8226 	}After pressing the LED and sound that was just played by the program the original LED/sound plays followed by a new random LED/sound. \
{\listtext	\uc0\u8226 	}Each round the program plays the sequence of LED/sound the player has already pressed plus a new LED/sound the player must press. The program \'93remembers\'94 the sequence of previously played LED/sound. \
{\listtext	\uc0\u8226 	}The player thus needs to remember the sequence and the new LED/sound to press for each round of the game\
\pard\pardeftab720\partightenfactor0
\cf0 \
ii) Identify and Explain the principal functions for establishing game state?\
In 
\f0\b loop() 
\f1\b0 there is an if statement that check is the correct button was pushed by the player:\
   if (button != random(LED_BUTTON_COUNT)) \{\
      // Play sad sound and start a new game\
      displayLightAndSound(-1, 1000);\
      gameSeed = micros();\
      delay(1000);\
      sequenceLength = 0;//reset sequence length\
      startUpLightsAndSound();//light each light/sound and wait for player to press any button to start the game \
    \}\
\
If the user pressed the wrong button the code in the if statement runs-> importantly it calls: 
\f0\b startUpLightsAndSound():
\f1\b0 \
This function is called when the player presses the wrong sequence of buttons (player misremembers) OR takes to long to press the correct button (3 seconds according to the code)\
The function makes each LED and turn on for 100ms as well as play its corresponding sound thru piezo by calling 
\f0\b displayLightAndSound() 
\f1\b0 four times (for each LED/Sound/Button combo) for the startup sequence which tells the player a new game has started. \
\
Entering game state: press any button: 
\f0\b startUpLightsAndSound() 
\f1\b0 is also called in 
\f0\b setup() 
\f1\b0 so it will be the default when the code loads. \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 PART TWO B: INITIAL CODE OBSERVATION 
\f1\b0\fs24 \
i) What computational structure(s) do you believe to be missing - although game runs?\
A way of storing the sequence in an array. \
ii) What purpose would the missing structure(s) serve?\
To compare the user\'92s input with the array that keeps track of the randomly generated sequence so the user could retry their answer. For example - the game could allow for two tries instead of one mistake creating a reset.\
\

\f0\b\fs28 PART THREE: HOW DOES THE GAME WORK
\f1\b0 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 i) What computational structure does the game employ to establish and maintain state?\
The game employs the use of the 
\f0\b randomSeed()
\f1\b0  function. In 
\f0\b setup() 
\f1\b0 gameSeed is initialized with the number given by micros(). gameSeed is a variable declared as static long, which is important because this means that it will only be created and initialized the first time it is called. So randomSeed always has the same long generated sequence that is created in setup(). The randomization of which LED/sound plays is always within this generated sequence by randomSeed().\
\
ii) What is special about this computational structure?\
randomSeed() makes it so the program doesn\'92t need to use an array - it\'92s a cool way of referencing a sequence of numbers that will always stay the same but it is more limited than an array. \
\
References:\
https://www.arduino.cc/en/pmwiki.php?n=Reference/Static\
https://www.arduino.cc/reference/en/language/functions/random-numbers/randomseed/\
\
}